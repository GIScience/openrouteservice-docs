{
  "swagger" : "2.0",
  "info" : {
    "description" : "This is the openrouteservice API documentation",
    "version" : "4.4",
    "title" : "openrouteservice",
    "contact" : {
      "email" : "support@openrouteservice.org"
    },
    "license" : {
      "name" : "MIT",
      "url" : "https://github.com/swagger-api/swagger-ui/blob/master/LICENSE"
    }
  },
  "host" : "api.openrouteservice.org",
  "tags" : [ {
    "name" : "Directions",
    "description" : "Get directions for different modes of transport"
  }, {
    "name" : "Geocoding",
    "description" : "Resolve input coordinates to addresses and vice versa"
  }, {
    "name" : "Isochrones",
    "description" : "Obtain areas of reachability from given locations"
  }, {
    "name" : "Places",
    "description" : "Search for points of interest around points or in geometries"
  }, {
    "name" : "Matrix",
    "description" : "Obtain one-to-many, many-to-one and many-to-many matrices for time and distance"
  } ],
  "schemes" : [ "https" ],
  "produces" : [ "text/json; charset=utf-8" ],
  "security" : [ {
    "UserSecurity" : [ ]
  } ],
  "paths" : {
    "/directions" : {
      "get" : {
        "tags" : [ "Directions" ],
        "summary" : "Routing Service",
        "description" : "Returns a route between two or more locations for a selected profile and its settings as GeoJSON response.\n",
        "parameters" : [ {
          "name" : "coordinates",
          "in" : "query",
          "description" : "Pipe (|) separated List of longitude,latitude coordinates visited in order.\n\nExample values:\n  `8.34234,48.23424`\n  `8.34423,48.26424`\n",
          "required" : true,
          "type" : "array",
          "items" : {
            "type" : "string",
            "format" : "longitude,latitude"
          },
          "collectionFormat" : "pipes"
        }, {
          "name" : "profile",
          "in" : "query",
          "description" : "Specifies the route profile.",
          "required" : true,
          "type" : "string",
          "default" : "driving-car",
          "enum" : [ "driving-car", "driving-hgv", "cycling-regular", "cycling-road", "cycling-mountain", "cycling-electric", "foot-walking", "foot-hiking", "wheelchair" ]
        }, {
          "name" : "preference",
          "in" : "query",
          "description" : "Specifies the route preference.",
          "required" : false,
          "type" : "string",
          "default" : "fastest",
          "enum" : [ "fastest", "shortest", "recommended" ]
        }, {
          "name" : "units",
          "in" : "query",
          "description" : "Specifies the distance unit.",
          "required" : false,
          "type" : "string",
          "default" : "m",
          "enum" : [ "m", "km", "mi" ]
        }, {
          "name" : "language",
          "in" : "query",
          "description" : "Language for the route instructions.",
          "required" : false,
          "type" : "string",
          "default" : "en",
          "enum" : [ "cn", "de", "en", "es", "ru", "dk", "fr", "it", "nl", "br", "se", "tr", "gr" ]
        }, {
          "name" : "geometry",
          "in" : "query",
          "description" : "Specifies whether to return geometry.",
          "required" : false,
          "type" : "boolean",
          "default" : true,
          "enum" : [ "true", "false" ]
        }, {
          "name" : "geometry_format",
          "in" : "query",
          "description" : "Sets the format of the returned geometry. Note that for `elevation=true` `encodedpolyline` also encodes the height information of each point.\nTo decode, please use a suitable library (for example [graphhopper](https://github.com/graphhopper/graphhopper/blob/master/web/src/main/java/com/graphhopper/http/WebHelper.java)).\n",
          "required" : false,
          "type" : "string",
          "default" : "encodedpolyline",
          "enum" : [ "encodedpolyline", "geojson", "polyline" ]
        }, {
          "name" : "geometry_simplify",
          "in" : "query",
          "description" : "\"Specifies whether to simplify the geometry. `true` will automatically be set to `false` if `extra_info` parameter is specified.\"\n",
          "required" : false,
          "type" : "boolean",
          "default" : false,
          "format" : "double",
          "enum" : [ "true", "false" ]
        }, {
          "name" : "instructions",
          "in" : "query",
          "description" : "Specifies whether to return instructions.",
          "required" : false,
          "type" : "boolean",
          "default" : true,
          "enum" : [ "true", "false" ]
        }, {
          "name" : "instructions_format",
          "in" : "query",
          "description" : "Select `html` for more verbose instructions.",
          "required" : false,
          "type" : "string",
          "default" : "text",
          "enum" : [ "html", "text" ]
        }, {
          "name" : "roundabout_exits",
          "in" : "query",
          "description" : "Provides bearings of the entrance and all passed roundabout exits. Adds the `exit_bearings` array to the `step` object in the response. Default is `false`.",
          "required" : false,
          "type" : "boolean",
          "default" : false,
          "enum" : [ "true", "false" ]
        }, {
          "name" : "attributes",
          "in" : "query",
          "description" : "Pipe (|) seperated List of route attributes:\n* `avgspeed` - Returns average speed of each segment and the route in km/h.\n* `detour_factor` - Returns the deviation of a segment compared to a straight line (1) from A to B.\n* `percentage` - Returns the proportion of the route for each segment.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "avgspeed", "detour_factor", "percentage" ]
          },
          "collectionFormat" : "pipes",
          "uniqueItems" : true
        }, {
          "name" : "maneuvers",
          "in" : "query",
          "description" : "Specifies whether the maneuver object is included into the `step` object or not. Default value is `false`.",
          "required" : false,
          "type" : "boolean",
          "default" : false,
          "enum" : [ "true", "false" ]
        }, {
          "name" : "radiuses",
          "in" : "query",
          "description" : "A pipe (`|`) delimited list of maximum distances (measured in meters) that limit the search of nearby road segments to every given waypoint.\nThe values must be greater than `0`, the value of `-1` specifies no limit in the search.\nThe number of radiuses correspond to the number of waypoints.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "number",
            "format" : "float"
          },
          "collectionFormat" : "pipes"
        }, {
          "name" : "bearings",
          "in" : "query",
          "description" : "Specifies a pipe (|) delimited list of pairs (bearings and deviations) to filter the segments of the road network a waypoint can snap to. For example `bearings=45,10|120,20`. \nEach pair is a comma-separated list that can consist of one or two float values, where the first value is the bearing and the second one is the allowed deviation from the bearing. The bearing can take values between `0` and `360` clockwise from true north.\nIf the deviation is not set, then the default value of `100` degrees is used. The number of pairs must correspond to the number of waypoints.\n Setting `optimized=false` is mandatory for this feature to work for all profiles.\nThe number of bearings corresponds to the length of waypoints-1 or waypoints. If the bearing information for the last waypoint is given, then this will control the sector from which the destination waypoint may be reached. You can skip a bearing for a certain waypoint by passing an empty value for a pair, e.g. 30,20||40,20.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "format" : "bearing,deviation"
          },
          "collectionFormat" : "pipes"
        }, {
          "name" : "continue_straight",
          "in" : "query",
          "description" : "Forces the route to keep going straight at waypoints restricting uturns there even if it would be faster. This setting will work for all profiles except for `driving-*`. In this case you will have to set `optimized=false` for it to work. `false` by default",
          "required" : false,
          "type" : "boolean",
          "default" : false,
          "enum" : [ "true", "false" ]
        }, {
          "name" : "elevation",
          "in" : "query",
          "description" : "Specifies whether to return elevation values for points. Please note that elevation also gets encoded for `geometry_format=encodedpolyline`.",
          "required" : false,
          "type" : "boolean",
          "default" : false,
          "enum" : [ "true", "false" ]
        }, {
          "name" : "extra_info",
          "in" : "query",
          "description" : "Pipe (|) separated List of additional information. Returns information on [steepness](https://github.com/GIScience/openrouteservice-docs/blob/master/README.md#steepness), [suitability](https://github.com/GIScience/openrouteservice-docs/blob/master/README.md#suitability), [surface](https://github.com/GIScience/openrouteservice-docs/blob/master/README.md#surface), [waycategory](https://github.com/GIScience/openrouteservice-docs/blob/master/README.md#waycategory), [waytype](https://github.com/GIScience/openrouteservice-docs/blob/master/README.md#waytype), [tollways](https://github.com/GIScience/openrouteservice-docs/blob/master/README.md#tollways) or [trail difficulty](https://github.com/GIScience/openrouteservice-docs/blob/master/README.md#trail-difficulty) ",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "steepness", "suitability", "surface", "waycategory", "waytype", "tollways", "traildifficulty" ]
          },
          "collectionFormat" : "pipes",
          "uniqueItems" : true
        }, {
          "name" : "optimized",
          "in" : "query",
          "description" : "Uses contraction hierarchies if available (`false`). `true` by default\n",
          "required" : false,
          "type" : "boolean",
          "default" : true,
          "enum" : [ "true", "false" ]
        }, {
          "name" : "options",
          "in" : "query",
          "description" : "For advanced options formatted as json object. For structure refer to the **options model** below.\nThe available parameters are:\n\n\n  - `maximum_speed` : Specifies a maximum travel speed restriction in km/h.\n\n\n  - `avoid_features` : Pipe (|) seperated list of features to avoid.\n    The available features are :\n\n      |     Feature    | Available for                               |\n      |:--------------:|---------------------------------------------|\n      | `highways`     | driving-*                                   |\n      | `tollways`     | driving-*                                   |\n      | `ferries`      | driving-\\*, cycling-\\*, foot-\\*, wheelchair |\n      | `tunnels`      | driving-*                                   |\n      | `pavedroads`   | driving-\\*, cycling-*                       |\n      | `unpavedroads` | driving-\\*, cycling-*                       |\n      | `tracks`       | driving-*                                   |\n      | `fords`        | driving-\\*, cycling-\\*, foot-*              |\n      | `steps`        | cycling-\\*, foot-\\*, wheelchair             |\n      | `hills`        | cycling-\\*, foot-\\*                         |\n\n\n  - `vehicle_type` (for `profile=driving-hgv` only): `hgv`,`bus`,`agricultural`,`delivery`,`forestry` and `goods`. It is needed for **vehicle restrictions** to work.\n\n\n  - `profile_params` : Specifies additional routing parameters.\n    - `weightings`: Weightings will prioritize specified factors over the shortest path.\n      - `steepness_difficulty`: Specifies the fitness level for `cycling-*` profiles.\n        - `level`: `0` = Novice, `1` = Moderate, `2` = Amateur, `3` = Pro. The prefered gradient increases with level\n\n      - `green`: Specifies the Green factor for `foot-*` profiles.\n        - `factor`: Values range from `0` to `1`. `0` equals normal routing. `1` will prefer ways through green areas over a shorter route.\n\n      - `quiet`: Specifies the Quiet factor for `foot-*` profiles.\n        - `factor`: Values range from `0` to `1`. `0` equals normal routing. `1` will prefer quiet ways over a shorter route.\n\n    - `restrictions` : Specifies restrictions for `driving-hgv`, `wheelchair` or `cycling-*` profiles.\n      - for `cycling-*`: \n          \n          |  Parameter | Description                                                                                                                                                                               |\n          |:----------:|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n          | `gradient` | Only for avoided `hills` or specified `steepness_difficulty`. Specifies the maximum route steepness in percent. Values range from `1` to `15`. Routes with a higher gradient are avoided. |\n\n      - for `driving-hgv`: \n        _(you have to specify the `vehicle_type` in the options for these parameters)_\n\n          |  Parameter | Description                                                                                                                       |\n          |:----------:|-----------------------------------------------------------------------------------------------------------------------------------|\n          | `length`   | Length restriction in meters.                                                                                                     |\n          | `width`    | Width restriction in meters.                                                                                                      |\n          | `height`   | Height restriction in meters.                                                                                                     |\n          | `axleload` | Axleload restriction in tons.                                                                                                     |\n          | `weight`   | Weight restriction in tons.                                                                                                       |\n          | `hazmat`   | Specifies whether to use appropriate routing for delivering hazardous goods and avoiding water protected areas. Default is false. |\n\n      - for `wheelchair`:\n\n        |       Parameter       | Description                                                                                                                 |\n        |:---------------------:|-----------------------------------------------------------------------------------------------------------------------------|\n        |     `surface_type`    | Specifies the minimum [surface type](http://wiki.openstreetmap.org/wiki/Key:surface). Default is `\"cobblestone:flattened\"`. |\n        |      `track_type`     | Specifies the minimum [grade](http://wiki.openstreetmap.org/wiki/Key:tracktype) of the route. Default is `\"grade1\"`.        |\n        |   `smoothness_type`   | Specifies the minimum [smoothness](http://wiki.openstreetmap.org/wiki/Key:smoothness) of the route. Default is `\"good\"`.    |\n        | `maximum_sloped_curb` | Specifies the maximum height of the sloped curb in meters. Values are `0.03`, `0.06`(default), `0.1` or `any`.              |\n        |   `maximum_incline`   | Specifies the maximum incline as a percentage. `3`, `6`(default), `10`, `15` or `any`.                                      |\n\n\n  - `avoid_polygons` : Comprises areas to be avoided for the route. Formatted as [geojson polygon](http://geojson.org/geojson-spec.html#id4) or [geojson multipolygon](http://geojson.org/geojson-spec.html#id7).\n\nThis is an example options object for a `cycling-*` profile:\n\n```json\n{\n  \"maximum_speed\": 10,\n  \"avoid_features\": \"unpavedroads\",\n  \"profile_params\": {\n    \"weightings\": {\n      \"steepness_difficulty\": {\n        \"level\": 1\n      },\n      \"green\": {\n        \"factor\": 0.8\n      },\n      \"quiet\": {\n        \"factor\": 1.0\n      }\n    },\n    \"restrictions\": {\n      \"gradient\": 5\n    }\n  },\n  \"avoid_polygons\": {\n    \"type\": \"Polygon\",\n    \"coordinates\": [\n                    [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0] ]\n   ]}\n}\n```\nThe minified form(for copy paste purposes):\n\n`{\"maximum_speed\":10,\"avoid_features\":\"unpavedroads\",\"profile_params\":{\"weightings\":{\"steepness_difficulty\":{\"level\":1},\"green\":{\"factor\":0.8},\"quiet\":{\"factor\":1.0}},\"restrictions\":{\"gradient\":5}},\"avoid_polygons\":{\"type\":\"Polygon\",\"coordinates\":[[[100.0,0.0],[101.0,0.0],[101.0,1.0],[100.0,1.0],[100.0,0.0]]]}}`\n\nMore examples can be found [here](https://github.com/GIScience/openrouteservice-docs#examples).\n",
          "required" : false,
          "type" : "string",
          "default" : "{}"
        }, {
          "name" : "id",
          "in" : "query",
          "description" : "Arbitrary identification string of the request reflected in the meta information.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Standard response for successfully processed requests. Returns JSON. The decoded values of the extra information can be found [here](https://github.com/GIScience/openrouteservice-docs).",
            "schema" : {
              "$ref" : "#/definitions/Routeresponse"
            }
          },
          "400" : {
            "description" : "An unexpected error was encountered and more detailed internal error code is provided.\n\n| Internal Code | Description                                        |\n|:-------------:|----------------------------------------------------|\n|      200      | Unable to parse JSON request.                      |\n|      201      | Required parameter is missing.                     |\n|      202      | Invalid parameter format.                          |\n|      203      | Invalid parameter value.                           |\n|      204      | Parameter value exceeds the maximum allowed limit. |\n|      299      | Unknown internal error.                            |\n",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "401" : {
            "description" : "Authorization field missing."
          },
          "403" : {
            "description" : "Key not authorised."
          },
          "405" : {
            "description" : "The specified HTTP method is not supported. For more details, refer to the EndPoint documentation."
          },
          "413" : {
            "description" : "The request is larger than the server is able to process, the data provided in the request exceeds the capacity limit."
          },
          "500" : {
            "description" : "The request is incorrect and therefore can not be processed."
          },
          "501" : {
            "description" : "Indicates that the server does not support the functionality needed to fulfill the request."
          },
          "503" : {
            "description" : "The server is currently unavailable due to overload or maintenance."
          }
        }
      }
    },
    "/geocoding" : {
      "get" : {
        "tags" : [ "Geocoding" ],
        "summary" : "Geocoding Service",
        "description" : "This endpoint can be used for geocoding (specified `query`) and reverse geocoding requests (specified `location`)\n\n**Either** `query` **or** `location` **has to be specified for a valid request.**\n\nIf both parameters are specified `location` takes precedence.\n\n- **geocoding:** Returns a JSON formatted list of objects corresponding to the search input.\n- **reverse geocoding:** Returns the next enclosing object with an address tag which surrounds the given coordinate.\n",
        "parameters" : [ {
          "name" : "query",
          "in" : "query",
          "description" : "Name of location, street address or postal code. For a structured geocoding request, a JSON object can be passed.  Please refer to the `Geocoding structured query` in the model section below. Examples can be found [here](https://github.com/GIScience/openrouteservice-docs#geocoding-structured-query). ",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "location",
          "in" : "query",
          "description" : "Coordinate to be inquired.",
          "required" : false,
          "type" : "number",
          "format" : "longitude,latitude"
        }, {
          "name" : "lang",
          "in" : "query",
          "description" : "Sets the language of the response.",
          "required" : false,
          "type" : "string",
          "default" : "en",
          "enum" : [ "de", "en", "fr", "it" ]
        }, {
          "name" : "boundary_type",
          "in" : "query",
          "description" : "Specifies the type of spatial search restriction.  `rect` for a rectangle and `circle`",
          "required" : false,
          "type" : "string",
          "enum" : [ "rect", "circle" ]
        }, {
          "name" : "rect",
          "in" : "query",
          "description" : "**For `boundary_type=rect` only!** Sets the restriction rectangle's minimum/maximum longitude/latitude: `MinLong,MinLat,MaxLong,Maxlat`. Example: `8.696837,49.408739,8.703489,49.41209`\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "circle",
          "in" : "query",
          "description" : "\"**For `boundary_type=circle` only!** Sets the restriction circle with a Centerpoint and a Radius in meters: `Long,Lat,Radius`. Example: `8.696837,49.408739,5000`\"\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Specifies the maximum number of responses. Not needed for reverse.",
          "required" : false,
          "type" : "number",
          "default" : 20.0,
          "format" : "double"
        }, {
          "name" : "id",
          "in" : "query",
          "description" : "Arbitrary identification string of the request reflected in the meta information.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Standard response for successfully processed requests. Returns JSON.",
            "schema" : {
              "$ref" : "#/definitions/Geocoderesponse"
            }
          },
          "400" : {
            "description" : "An unexpected error was encountered and more detailed internal\nerror\\ncode is provided.\n\n| Internal Code | Description                                        |\n|:-------------:|----------------------------------------------------|\n|      100      | Unable to parse JSON request.                      |\n|      101      | Required parameter is missing.                     |\n|      102      | Invalid parameter format.                          |\n|      103      | Invalid parameter value.                           |\n|      104      | Parameter value exceeds the maximum allowed limit. |\n|      199      | Unknown internal error.                            |\n",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "401" : {
            "description" : "Authorization field missing."
          },
          "403" : {
            "description" : "Key not authorised."
          },
          "405" : {
            "description" : "The specified HTTP method is not supported. For more details, refer to the EndPoint documentation."
          },
          "413" : {
            "description" : "The request is larger than the server is able to process, the data provided in the request exceeds the capacity limit."
          },
          "500" : {
            "description" : "The request is incorrect and therefore can not be processed."
          },
          "501" : {
            "description" : "Indicates that the server does not support the functionality needed to fulfill the request."
          },
          "503" : {
            "description" : "The server is currently unavailable due to overload or maintenance."
          }
        }
      }
    },
    "/isochrones" : {
      "get" : {
        "tags" : [ "Isochrones" ],
        "summary" : "Isochrones Service",
        "description" : "\"The Isochrone Service supports time and distance analyses for one single or multiple locations.\nYou may also specify the isochrone interval or provide multiple exact isochrone range values.\nThis service allows the same range of profile options listed in the ORS Routing section which help you to further customize your request to obtain a more detailed reachability area response. \"\n",
        "parameters" : [ {
          "name" : "locations",
          "in" : "query",
          "description" : "List of longitude, latitude coordinates delimited with pipe (|).\n\nExample values:\n  `8.34234,48.23424`\n",
          "required" : true,
          "type" : "array",
          "items" : {
            "type" : "string",
            "format" : "longitude,latitude"
          },
          "collectionFormat" : "pipes"
        }, {
          "name" : "profile",
          "in" : "query",
          "description" : "Specifies the routing profile.",
          "required" : false,
          "type" : "string",
          "default" : "driving-car",
          "enum" : [ "driving-car", "driving-hgv", "cycling-regular", "cycling-road", "cycling-mountain", "cycling-electric", "foot-walking", "foot-hiking"]
        }, {
          "name" : "range_type",
          "in" : "query",
          "description" : "Set _time_ for isochrones or _distance_ for equidistants.",
          "required" : false,
          "type" : "string",
          "default" : "time"
        }, {
          "name" : "range",
          "in" : "query",
          "description" : "Maximum range value of the analysis in **seconds** for time and **meters** for distance. Alternatively a comma separated list of specific single range values.\n",
          "required" : true,
          "type" : "number",
          "default" : 60.0,
          "format" : "double"
        }, {
          "name" : "interval",
          "in" : "query",
          "description" : "Interval of isochrones or equidistants for one range value. value in **seconds** for time and **meters** for distance.\n",
          "required" : false,
          "type" : "number",
          "format" : "double"
        }, {
          "name" : "units",
          "in" : "query",
          "description" : "Unit format for  `range_type=distance`.\n",
          "required" : false,
          "type" : "string",
          "enum" : [ "m", "km", "mi" ]
        }, {
          "name" : "location_type",
          "in" : "query",
          "description" : "start(default) treats the location(s) as starting point, destination as goal.",
          "required" : false,
          "type" : "string",
          "default" : "start",
          "enum" : [ "start", "destination" ]
        }, {
          "name" : "attributes",
          "in" : "query",
          "description" : "Values are area and reachfactor. Delimit with pipe (|) for both.\n`area` returns the area of each polygon in its feature properties.\n`reachfactor` returns a reachability score between 0 and 1.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "area", "reachfactor" ]
          },
          "collectionFormat" : "pipes",
          "uniqueItems" : true
        }, {
          "name" : "options",
          "in" : "query",
          "description" : "For advanced options formatted as json object. For structure refer to the **options model** below.\nThe available parameters are:\n\n\n  - `maximum_speed` : Specifies a maximum travel speed restriction in km/h.\n\n\n  - `avoid_features` : Pipe (|) seperated list of features to avoid.\n    The available features are :\n\n      |     Feature    | Available for                               |\n      |:--------------:|---------------------------------------------|\n      | `highways`     | driving-*                                   |\n      | `tollways`     | driving-*                                   |\n      | `ferries`      | driving-\\*, cycling-\\*, foot-\\*, wheelchair |\n      | `tunnels`      | driving-*                                   |\n      | `pavedroads`   | driving-\\*, cycling-*                       |\n      | `unpavedroads` | driving-\\*, cycling-*                       |\n      | `tracks`       | driving-*                                   |\n      | `fords`        | driving-\\*, cycling-\\*, foot-*              |\n      | `steps`        | cycling-\\*, foot-\\*, wheelchair             |\n      | `hills`        | cycling-\\*, foot-\\*                         |\n\n\n  - `vehicle_type` (for `profile=driving-hgv` only): `hgv`,`bus`,`agricultural`,`delivery`,`forestry` and `goods`. It is needed for **vehicle restrictions** to work.\n\n\n  - `profile_params` : Specifies additional routing parameters.\n    - `weightings`: Weightings will prioritize specified factors over the shortest path.\n      - `steepness_difficulty`: Specifies the fitness level for `cycling-*` profiles.\n        - `level`: `0` = Novice, `1` = Moderate, `2` = Amateur, `3` = Pro. The prefered gradient increases with level\n\n      - `green`: Specifies the Green factor for `foot-*` profiles.\n        - `factor`: Values range from `0` to `1`. `0` equals normal routing. `1` will prefer ways through green areas over a shorter route.\n\n      - `quiet`: Specifies the Quiet factor for `foot-*` profiles.\n        - `factor`: Values range from `0` to `1`. `0` equals normal routing. `1` will prefer quiet ways over a shorter route.\n\n    - `restrictions` : Specifies restrictions for `driving-hgv`, `wheelchair` or `cycling-*` profiles.\n      - for `cycling-*`: \n          \n          |  Parameter | Description                                                                                                                                                                               |\n          |:----------:|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n          | `gradient` | Only for avoided `hills` or specified `steepness_difficulty`. Specifies the maximum route steepness in percent. Values range from `1` to `15`. Routes with a higher gradient are avoided. |\n\n      - for `driving-hgv`: \n        _(you have to specify the `vehicle_type` in the options for these parameters)_\n      \n          |  Parameter | Description                                                                                                                       |\n          |:----------:|-----------------------------------------------------------------------------------------------------------------------------------|\n          | `length`   | Length restriction in meters.                                                                                                     |\n          | `width`    | Width restriction in meters.                                                                                                      |\n          | `height`   | Height restriction in meters.                                                                                                     |\n          | `axleload` | Axleload restriction in tons.                                                                                                     |\n          | `weight`   | Weight restriction in tons.                                                                                                       |\n          | `hazmat`   | Specifies whether to use appropriate routing for delivering hazardous goods and avoiding water protected areas. Default is false. |\n\n      - for `wheelchair`:\n\n        |       Parameter       | Description                                                                                                         |\n        |:---------------------:|---------------------------------------------------------------------------------------------------------------------|\n        |     `surface_type`    | Specifies the [surface type](http://wiki.openstreetmap.org/wiki/Key:surface). Default is `\"cobblestone:flattened\"`. |\n        |      `track_type`     | Specifies the [grade](http://wiki.openstreetmap.org/wiki/Key:tracktype) of the route. Default is `\"grade1\"`.        |\n        |   `smoothness_type`   | Specifies the [smoothness](http://wiki.openstreetmap.org/wiki/Key:smoothness) of the route. Default is `\"good\"`.    |\n        | `maximum_sloped_curb` | Specifies the maximum height of the sloped curb in meters. Values are `0.03`, `0.06`(default), `0.1` or `any`.      |\n        |   `maximum_incline`   | Specifies the maximum incline as a percentage. `3`, `6`(default), `10`, `15` or `any`.                              |\n\n\n  - `avoid_polygons` : Comprises areas to be avoided for the route. Formatted as [geojson polygon](http://geojson.org/geojson-spec.html#id4) or [geojson multipolygon](http://geojson.org/geojson-spec.html#id7).\n\nThis is an example options object for a `cycling-*` profile:\n\n```json\n{\n  \"maximum_speed\": 10,\n  \"avoid_features\": \"unpavedroads\",\n  \"profile_params\": {\n    \"weightings\": {\n      \"steepness_difficulty\": {\n        \"level\": 1\n      },\n      \"green\": {\n        \"factor\": 0.8\n      },\n      \"quiet\": {\n        \"factor\": 1.0\n      }\n    },\n    \"restrictions\": {\n      \"gradient\": 5\n    }\n  },\n  \"avoid_polygons\": {\n    \"type\": \"Polygon\",\n    \"coordinates\": [\n                    [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0] ]\n   ]}\n}\n```\nThe minified form(for copy paste purposes):\n\n`{\"maximum_speed\":10,\"avoid_features\":\"unpavedroads\",\"profile_params\":{\"weightings\":{\"steepness_difficulty\":{\"level\":1},\"green\":{\"factor\":0.8},\"quiet\":{\"factor\":1.0}},\"restrictions\":{\"gradient\":5}},\"avoid_polygons\":{\"type\":\"Polygon\",\"coordinates\":[[[100.0,0.0],[101.0,0.0],[101.0,1.0],[100.0,1.0],[100.0,0.0]]]}}`\n\nMore examples can be found [here](https://github.com/GIScience/openrouteservice-docs#examples).\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "intersections",
          "in" : "query",
          "description" : "Specifies whether to return intersection polygons.",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "id",
          "in" : "query",
          "description" : "Arbitrary identification string of the request reflected in the meta information.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Standard response for successfully processed requests. Returns JSON.",
            "schema" : {
              "$ref" : "#/definitions/IsochronesResponse"
            }
          },
          "400" : {
            "description" : "An unexpected error was encountered and more detailed internal\nerror\\ncode is provided.\n\n| Internal Code | Description                                        |\n|:-------------:|----------------------------------------------------|\n|      300      | Unable to parse JSON request.                      |\n|      301      | Required parameter is missing.                     |\n|      302      | Invalid parameter format.                          |\n|      303      | Invalid parameter value.                           |\n|      304      | Parameter value exceeds the maximum allowed limit. |\n|      305      | PRequested feature is not supported.               |\n|      399      | Unknown internal error.                            |\n",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "401" : {
            "description" : "Authorization field missing."
          },
          "403" : {
            "description" : "Key not authorised."
          },
          "405" : {
            "description" : "The specified HTTP method is not supported. For more details, refer to the EndPoint documentation."
          },
          "413" : {
            "description" : "The request is larger than the server is able to process, the data provided in the request exceeds the capacity limit."
          },
          "500" : {
            "description" : "The request is incorrect and therefore can not be processed."
          },
          "501" : {
            "description" : "Indicates that the server does not support the functionality needed to fulfill the request."
          },
          "503" : {
            "description" : "The server is currently unavailable due to overload or maintenance."
          }
        }
      }
    },
    "/places" : {
      "get" : {
        "tags" : [ "Places" ],
        "summary" : "Location Service",
        "description" : "Returns Points of Interest in the area surrounding a point or\na line geometry. Use the post endpoint for requests that exceed the get\ncharacter limit.\n\n- **pois:** Either `geometry` or `bbox` are required. `radius` required depending on `geometry`.\n- **category_stats:** Either `geometry` or `bbox` are required. `radius` required depending on `geometry`.\n- **category_list:** Additionally to this List the category groups and ids can be found [here](https://github.com/GIScience/openrouteservice-docs).\n",
        "parameters" : [ {
          "name" : "request",
          "in" : "query",
          "description" : "\"`pois` will return POI geometry as well as requested details.\n`category_stats` returns a POI count for each requested category.\n`category_list` returns a list of all categories (only the id parameter will be considered).\"\n",
          "required" : true,
          "type" : "string",
          "default" : "pois",
          "enum" : [ "pois", "category_stats", "category_list" ]
        }, {
          "name" : "category_group_ids",
          "in" : "query",
          "description" : "Comma seperated list of category group ids.",
          "required" : false,
          "type" : "string",
          "default" : "420"
        }, {
          "name" : "category_ids",
          "in" : "query",
          "description" : "Comma seperated list of category ids.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Name to filter the POIs by. **Only finds exact matches**",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "wheelchair",
          "in" : "query",
          "description" : "Filter returned features by wheelchair tag entries.",
          "required" : false,
          "type" : "string",
          "enum" : [ "true", "false", "limited" ]
        }, {
          "name" : "smoking",
          "in" : "query",
          "description" : "Filter returned features by wheelchair tag entries.",
          "required" : false,
          "type" : "string",
          "enum" : [ "true", "false" ]
        }, {
          "name" : "fee",
          "in" : "query",
          "description" : "Filter returned features by fee tag entries.",
          "required" : false,
          "type" : "string",
          "enum" : [ "true", "false" ]
        }, {
          "name" : "bbox",
          "in" : "query",
          "description" : "Defines a clipping bounding box. Can be defined additionally to `geometry`.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "number",
            "format" : "double"
          },
          "collectionFormat" : "csv",
          "maxItems" : 4,
          "minItems" : 4
        }, {
          "name" : "geometry",
          "in" : "query",
          "description" : "GeoJSON geometry object (Point, Linestring or Polygon)",
          "required" : false,
          "type" : "string",
          "default" : "{type: LineString, coordinates:[[8.167426,49.272556],[8.167588,47.272445],[8.168082,47.272105],[8.168224,47.271917],[8.16831,47.271941],[8.168926,47.272216],[8.169054,47.272278],[8.169165,47.272186],[8.169256,47.272103],[8.16948,47.271921],[8.170129,47.271408],[8.170265,47.271295],[8.170701,47.27097],[8.171496,47.270485],[8.171796,47.270296]]}"
        }, {
          "name" : "radius",
          "in" : "query",
          "description" : "Search radius in meters around the given (might be limited in the backend).\n**Required if geometry is a Point or Linestring**\n",
          "required" : false,
          "type" : "number",
          "default" : 500.0,
          "maximum" : 1000,
          "minimum" : 0,
          "format" : "double"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of returned objects (might be limited in the\nbackend). **For** `request=pois` **only.**\n",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "sortby",
          "in" : "query",
          "description" : "Sorts the returned features by _distance_ or _category_. **For** `request=pois` **only.**\n",
          "required" : false,
          "type" : "string",
          "enum" : [ "distance", "category" ]
        }, {
          "name" : "details",
          "in" : "query",
          "description" : "Pipe (|) seperated list of desired details. **For** `request=pois` **only.**\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "address", "contact", "attributes" ]
          },
          "collectionFormat" : "pipes",
          "uniqueItems" : true
        }, {
          "name" : "id",
          "in" : "query",
          "description" : "Arbitrary identification string of the request reflected in the meta information.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Standard response for successfully processed requests. Returns JSON.",
            "schema" : {
              "$ref" : "#/definitions/LocationsPoiResponse"
            }
          },
          "400" : {
            "description" : "An unexpected error was encountered and more detailed internal\n error\\ncode is provided.\n\n| Internal Code | Description                                        |\n|:-------------:|----------------------------------------------------|\n|      400      | Unable to parse JSON request.                      |\n|      401      | Required parameter is missing.                     |\n|      402      | Invalid parameter format.                          |\n|      403      | Invalid parameter value.                           |\n|      404      | Parameter value exceeds the maximum allowed limit. |\n|      499      | Unknown internal error.                            |\n",
            "schema" : {
              "$ref" : "#/definitions/error"
            }
          },
          "401" : {
            "description" : "Authorization field missing."
          },
          "403" : {
            "description" : "Key not authorised."
          },
          "405" : {
            "description" : "The specified HTTP method is not supported. For more details, refer to the EndPoint documentation."
          },
          "413" : {
            "description" : "The request is larger than the server is able to process, the data provided in the request exceeds the capacity limit."
          },
          "500" : {
            "description" : "The request is incorrect and therefore can not be processed."
          },
          "501" : {
            "description" : "Indicates that the server does not support the functionality needed to fulfill the request."
          },
          "503" : {
            "description" : "The server is currently unavailable due to overload or maintenance."
          }
        }
      },
      "post" : {
        "tags" : [ "Places" ],
        "summary" : "Location Service",
        "description" : "Returns Points of Interest in the area surrounding a geometry.",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "body for a post request",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/LocationsBody"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Standard response for successfully processed requests. Returns JSON.",
            "schema" : {
              "$ref" : "#/definitions/LocationsPoiResponse"
            }
          },
          "400" : {
            "description" : "An unexpected error was encountered and more detailed internal\nerror\\ncode is provided.\n\n| Internal Code | Description                                        |\n|:-------------:|----------------------------------------------------|\n|      400      | Unable to parse JSON request.                      |\n|      401      | Required parameter is missing.                     |\n|      402      | Invalid parameter format.                          |\n|      403      | Invalid parameter value.                           |\n|      404      | Parameter value exceeds the maximum allowed limit. |\n|      499      | Unknown internal error.                            |\n",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/error"
              }
            }
          },
          "401" : {
            "description" : "Authorization field missing."
          },
          "403" : {
            "description" : "Key not authorised."
          },
          "405" : {
            "description" : "The specified HTTP method is not supported. For more details, refer to the EndPoint documentation."
          },
          "413" : {
            "description" : "The request is larger than the server is able to process, the data provided in the request exceeds the capacity limit."
          },
          "500" : {
            "description" : "The request is incorrect and therefore can not be processed."
          },
          "501" : {
            "description" : "Indicates that the server does not support the functionality needed to fulfill the request."
          },
          "503" : {
            "description" : "The server is currently unavailable due to overload or maintenance."
          }
        }
      }
    },
    "/matrix" : {
      "get" : {
        "tags" : [ "Matrix" ],
        "summary" : "Matrix Service",
        "description" : "Returns duration, distance or weight matrix for mutliple source and destination points.\nBy default a symmetric duration matrix is returned where every point in `locations` is paired with each other. The result is `null` if a value can't be determined.\n",
        "parameters" : [ {
          "name" : "profile",
          "in" : "query",
          "description" : "Specifies the route profile.",
          "required" : true,
          "type" : "string",
          "default" : "driving-car",
          "enum" : [ "driving-car", "driving-hgv", "cycling-regular", "cycling-road", "cycling-mountain", "cycling-electric", "foot-walking", "foot-hiking", "wheelchair" ]
        }, {
          "name" : "locations",
          "in" : "query",
          "description" : "Pipe (|) separated List of longitude,latitude coordinates\n\nExample values: `9.970093,48.477473` `9.207916,49.153868` `37.573242,55.801281` `115.663757,38.106467`\n",
          "required" : true,
          "type" : "array",
          "items" : {
            "type" : "string",
            "format" : "longitude,latitude"
          },
          "collectionFormat" : "pipes"
        }, {
          "name" : "sources",
          "in" : "query",
          "description" : "A comma separated list of indices that refers to the list of locations (starting with `0`). {index_1},{index_2}(,{index_N} ...) or `all` (default).\n\nExample: `0,3` for the first and fourth Location.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "format" : "{index}"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "destinations",
          "in" : "query",
          "description" : "A comma separated list of indices that refers to the list of locations (starting with `0`). {index_1},{index_2}[,{index_N} ...] or `all` (default).\n\nExample: `0,3` for the first and fourth Location.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "format" : "{index}"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "metrics",
          "in" : "query",
          "description" : "Specifies a list of returned metrics separated with a pipe character (|).\n* `distance` - Returns distance matrix for specified points in defined `units`.\n* `duration` - Returns duration matrix for specified points in defined `units`.\n* `weight`   - Returns weight matrix for specified points in defined `units`.\n",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "distance", "duration", "weight" ]
          },
          "collectionFormat" : "pipes",
          "default" : "duration",
          "uniqueItems" : true
        }, {
          "name" : "resolve_locations",
          "in" : "query",
          "description" : "Specifies whether given locations are resolved or not. If the parameter value set to `true`, every element in destinations and sources will contain the `name` element that identifies the name of the closest street. Default is `false`\n",
          "required" : false,
          "type" : "boolean",
          "default" : false,
          "enum" : [ "true", "false" ]
        }, {
          "name" : "units",
          "in" : "query",
          "description" : "Specifies the unit of measurement for distances. Default is `m`",
          "required" : false,
          "type" : "string",
          "default" : "m",
          "enum" : [ "m", "km", "mi" ]
        }, {
          "name" : "optimized",
          "in" : "query",
          "description" : "Specifies whether Dijkstra algorithm (`false`) or any available technique to speed up shortest-path routing (`true`) is used. For normal Dijkstra the number of visited nodes is limited to `100000`\n",
          "required" : false,
          "type" : "boolean",
          "default" : true,
          "enum" : [ "true", "false" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "Standard response for successfully processed requests. Returns JSON.\n",
            "schema" : {
              "$ref" : "#/definitions/MatrixResponse"
            }
          },
          "400" : {
            "description" : "An unexpected error was encountered and more detailed internal\nerror\\ncode is provided.\n\n| Internal Code | Description                                        |\n|:-------------:|----------------------------------------------------|\n|      600      | Unable to parse JSON request.                      |\n|      601      | Required parameter is missing.                     |\n|      602      | Invalid parameter format.                          |\n|      603      | Invalid parameter value.                           |\n|      604      | Parameter value exceeds the maximum allowed limit. |\n|      699      | Unknown internal error.                            |\n",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/error"
              }
            }
          },
          "401" : {
            "description" : "Authorization field missing."
          },
          "403" : {
            "description" : "Key not authorised."
          },
          "405" : {
            "description" : "The specified HTTP method is not supported. For more details, refer to the EndPoint documentation."
          },
          "413" : {
            "description" : "The request is larger than the server is able to process, the data provided in the request exceeds the capacity limit."
          },
          "500" : {
            "description" : "The request is incorrect and therefore can not be processed."
          },
          "501" : {
            "description" : "Indicates that the server does not support the functionality needed to fulfill the request."
          },
          "503" : {
            "description" : "The server is currently unavailable due to overload or maintenance."
          }
        }
      },
      "post" : {
        "tags" : [ "Matrix" ],
        "summary" : "Matrix Service",
        "description" : "Returns duration, distance or weight matrix for mutliple source and destination points.",
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "body for a Matrix post request",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/MatrixBody"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Standard response for successfully processed requests. Returns JSON.\n",
            "schema" : {
              "$ref" : "#/definitions/MatrixResponse"
            }
          },
          "400" : {
            "description" : "An unexpected error was encountered and more detailed internal\nerror\\ncode is provided.\n\n| Internal Code | Description                                        |\n|:-------------:|----------------------------------------------------|\n|      600      | Unable to parse JSON request.                      |\n|      601      | Required parameter is missing.                     |\n|      602      | Invalid parameter format.                          |\n|      603      | Invalid parameter value.                           |\n|      604      | Parameter value exceeds the maximum allowed limit. |\n|      699      | Unknown internal error.                            |\n",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/error"
              }
            }
          },
          "401" : {
            "description" : "Authorization field missing."
          },
          "403" : {
            "description" : "Key not authorised."
          },
          "405" : {
            "description" : "The specified HTTP method is not supported. For more details, refer to the EndPoint documentation."
          },
          "413" : {
            "description" : "The request is larger than the server is able to process, the data provided in the request exceeds the capacity limit."
          },
          "500" : {
            "description" : "The request is incorrect and therefore can not be processed."
          },
          "501" : {
            "description" : "Indicates that the server does not support the functionality needed to fulfill the request."
          },
          "503" : {
            "description" : "The server is currently unavailable due to overload or maintenance."
          }
        }
      }
    }
  },
  "securityDefinitions" : {
    "UserSecurity" : {
      "description" : "Add your API Key as the value of the *api_key* parameter to your GETrequest. (In this Demo you can click the Authentication Button.)",
      "type" : "apiKey",
      "name" : "api_key",
      "in" : "query"
    }
  },
  "definitions" : {
    "options" : {
      "type" : "object",
      "properties" : {
        "maximum_speed" : {
          "type" : "integer",
          "format" : "int64"
        },
        "avoid_features" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string",
            "enum" : [ "highways", "tollways", "ferries", "tunnels", "pavedroads", "unpavedroads", "tracks", "fords", "steps", "hills" ]
          }
        },
        "vehicle_type" : {
          "type" : "string",
          "description" : "Parameter for the driving-hgv Profile",
          "enum" : [ "hgv", "bus", "agricultural", "forestry", "goods", "delivery" ],
          "default" : "hgv"
        },
        "profile_params" : {
          "$ref" : "#/definitions/profile_params"
        },
        "avoid_polygons" : {
          "$ref" : "#/definitions/avoid_polygons"
        }
      },
      "example" : {
        "maximum_speed" : 12,
        "avoid_features" : [ "hills", "ferries", "tollways" ],
        "profile_params" : {
          "weightings" : {
            "level" : 2
          }
        },
        "restrictions" : {
          "gradient" : 13
        },
        "avoid_polygons" : {
          "type" : "Polygon",
          "coordinates" : [ [ [ 100, 0 ], [ 101, 0 ], [ 101, 1 ], [ 100, 1 ], [ 100, 0 ] ] ]
        }
      }
    },
    "profile_params" : {
      "properties" : {
        "length" : {
          "type" : "number",
          "format" : "double"
        },
        "width" : {
          "type" : "number",
          "format" : "double"
        },
        "height" : {
          "type" : "number",
          "format" : "double"
        },
        "axleload" : {
          "type" : "number",
          "format" : "double"
        },
        "weight" : {
          "type" : "number",
          "format" : "double"
        },
        "hazmat" : {
          "type" : "boolean"
        },
        "weightings" : {
          "$ref" : "#/definitions/profile_params_weightings"
        },
        "restrictions" : {
          "$ref" : "#/definitions/profile_params_restrictions"
        }
      }
    },
    "avoid_polygons" : {
      "properties" : {
        "type" : {
          "type" : "string",
          "default" : "Polygon"
        },
        "coordinates" : {
          "type" : "array",
          "items" : {
            "type" : "array",
            "items" : {
              "type" : "number",
              "format" : "double"
            },
            "maxItems" : 2,
            "minItems" : 2
          }
        }
      }
    },
    "Routeresponse" : {
      "properties" : {
        "routes" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Routeresponse_routes"
          }
        },
        "info" : {
          "$ref" : "#/definitions/Routeresponse_info"
        }
      },
      "title" : "Route Response Object"
    },
    "Routeresponse_routes" : {
      "properties" : {
        "summary" : {
          "$ref" : "#/definitions/routes_summary"
        },
        "geometry_format" : {
          "type" : "string",
          "example" : "encodedpolyline",
          "description" : "Contains the defined geometry format.",
          "default" : "encodedpolyline"
        },
        "geometry" : {
          "$ref" : "#/definitions/routes_geometry"
        },
        "segments" : {
          "type" : "array",
          "description" : "List containing the segments and its correspoding steps which make up the route.",
          "items" : {
            "$ref" : "#/definitions/segments"
          },
          "maxItems" : 1
        },
        "way_points" : {
          "type" : "array",
          "example" : [ 0, 163 ],
          "description" : "List containing the indices of way points corresponding to the *geometry*.",
          "items" : {
            "type" : "integer",
            "format" : "int64"
          },
          "maxItems" : 2,
          "minItems" : 2
        },
        "extras" : {
          "$ref" : "#/definitions/extras"
        },
        "bbox" : {
          "type" : "array",
          "example" : [ 8.327707, 48.231946, 8.345244, 48.263552 ],
          "description" : "Contains the minimum bounding box of the route.",
          "items" : {
            "type" : "number",
            "format" : "double"
          },
          "maxItems" : 4,
          "minItems" : 4
        }
      },
      "title" : "routes object",
      "example" : {
        "summary" : {
          "distance" : {
            "$ref" : "#/definitions/routes_summary/properties/distance/example"
          },
          "duration" : {
            "$ref" : "#/definitions/routes_summary/properties/duration/example"
          },
          "ascent" : {
            "$ref" : "#/definitions/routes_summary/properties/ascent/example"
          },
          "descent" : {
            "$ref" : "#/definitions/routes_summary/properties/descent/example"
          }
        },
        "geometry_format" : {
          "$ref" : "#/definitions/Routeresponse_routes/properties/geometry_format/example"
        },
        "geometry" : {
          "$ref" : "#/definitions/routes_geometry/example"
        },
        "segments" : {
          "distance" : 5757.4,
          "duration" : 821,
          "steps" : {
            "$ref" : "#/definitions/steps/example"
          }
        }
      }
    },
    "routes_summary" : {
      "properties" : {
        "distance" : {
          "type" : "number",
          "format" : "double",
          "example" : 5757.4,
          "description" : "Total route distance in specified units."
        },
        "duration" : {
          "type" : "number",
          "format" : "double",
          "example" : 821.0,
          "description" : "Total duration in seconds."
        },
        "ascent" : {
          "type" : "number",
          "format" : "double",
          "example" : 257.0,
          "description" : "Total ascent in meters."
        },
        "descent" : {
          "type" : "number",
          "format" : "double",
          "example" : 336.0,
          "description" : "Total descent in meters."
        },
        "avgspeed" : {
          "type" : "number",
          "format" : "double",
          "description" : "Total average speed in km/h"
        }
      },
      "title" : "summary object",
      "description" : "Contains total sums of duration, route distance and actual distance of the route."
    },
    "routes_geometry" : {
      "properties" : {
        "type" : {
          "type" : "string"
        },
        "coordinates" : {
          "$ref" : "#/definitions/geometry_coordinates"
        }
      },
      "description" : "Contains the geometry in the defined geometry format.",
      "example" : "mtkeHuv|q@~@VLHz@\\PR|@hBt@j@^n@L\\NjALv@Jh@NXi@zBm@jCKTy@z@qAhBa@\\[Ne@DgCc@i@?[Ty@hAi@zASRi@R}@H_@N[b@kAdCy@`Au@d@eA|@q@h@WRe@PYHYBqADgAAcAL_A^w@~@q@`@w@Zw@Cm@K[PeA|Aa@p@g@fAiAhBuAv@]VU^k@xAUXe@TqATy@V}@f@_@V[MUWqA_FKy@Me@_@cAu@{Ae@c@aAfBaAv@g@rBm@|@w@x@m@^U@m@Ma@SI\\mAlEkAjC_AjC_ApCe@z@i@j@q@f@[NsAp@u@T}A\\wATU?WCeBm@q@MwAGUCg@SMaAi@mDQm@K}@Mq@u@mAc@i@c@Ys@[WW_@q@e@a@cA_@w@E{BHmBXqBkBsA}@{Ao@iAB{@QYSi@qCUy@Ee@i@kBWk@yAoCWS_@SaAE{@yAu@mDUsAqA}@EM@QTiA|@iAn@gAd@eAg@_@I]??k@i@yBkEa@}@W}@WkCUqC?_@Hg@ZqABg@Gm@YoAEgAMq@@jAB|CC`@{@rACH"
    },
    "geometry_coordinates" : {
      "type" : "array",
      "description" : "Contains the coordinate arrays of every route point.",
      "items" : {
        "type" : "array",
        "description" : "Contains longitude, latitude and altitude(for elevation=true).",
        "items" : {
          "type" : "number",
          "format" : "double"
        },
        "maxItems" : 3,
        "minItems" : 2
      }
    },
    "segments" : {
      "properties" : {
        "distance" : {
          "type" : "number",
          "format" : "double",
          "example" : 5757.4,
          "description" : "Contains the distance of the segment in specified units."
        },
        "duration" : {
          "type" : "number",
          "format" : "double",
          "example" : 821.0,
          "description" : "Contains the duration of the segment in seconds."
        },
        "ascent" : {
          "type" : "number",
          "format" : "double",
          "description" : "Contains ascent of this segment in meters for `elevation=true`."
        },
        "descent" : {
          "type" : "number",
          "format" : "double",
          "description" : "Contains descent of this segment in meters for `elevation=true`."
        },
        "detour_factor" : {
          "type" : "number",
          "format" : "double",
          "description" : "Contains the deviation compared to a straight line that would have the factor `1`. Double the Distance would be a `2`."
        },
        "percentage" : {
          "type" : "number",
          "format" : "double",
          "description" : "Contains the proportion of the route in percent."
        },
        "avgspeed" : {
          "type" : "number",
          "format" : "double",
          "description" : "Contains the average speed of this segment in km/h."
        },
        "steps" : {
          "type" : "array",
          "description" : "List containing the specific steps the segment consists of.",
          "items" : {
            "$ref" : "#/definitions/steps"
          }
        }
      },
      "title" : "segments object",
      "example" : {
        "distance" : 5757.4,
        "duration" : 821,
        "steps" : {
          "$ref" : "#/definitions/steps/example"
        }
      }
    },
    "steps" : {
      "properties" : {
        "distance" : {
          "type" : "number",
          "format" : "double",
          "description" : "The distance for the step in meters."
        },
        "duration" : {
          "type" : "number",
          "format" : "double",
          "description" : "The duration for the step in seconds."
        },
        "type" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The [instruction](https://github.com/GIScience/openrouteservice-docs#instruction-types) action for symbolisation purposes."
        },
        "instruction" : {
          "type" : "string",
          "description" : "The routing instruction text for the step."
        },
        "name" : {
          "type" : "string",
          "description" : "The name of the next street."
        },
        "maneuver" : {
          "$ref" : "#/definitions/maneuver"
        },
        "way_points" : {
          "type" : "array",
          "description" : "List containing the indices of the steps start- and endpoint corresponding to the *geometry*.",
          "items" : {
            "type" : "integer",
            "format" : "int64"
          },
          "maxItems" : 2,
          "minItems" : 2
        },
        "exit_number" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Only for roundabouts. Contains the number of the exit to take."
        },
        "exit_bearings" : {
          "type" : "array",
          "description" : "Contains the bearing of the entrance and all passed exits in a roundabout for `roundabout_exits=true`.",
          "items" : {
            "type" : "integer",
            "format" : "int64"
          },
          "minItems" : 2
        }
      },
      "title" : "steps object",
      "example" : [ {
        "distance" : 383.1,
        "duration" : 46,
        "type" : "6",
        "instruction" : "Head south on Benatweg",
        "way_points" : [ 0, 12 ]
      }, {
        "distance" : 757.4,
        "duration" : 54.5,
        "type" : "1",
        "instruction" : "Turn right onto Hölzle, K 5528",
        "way_points" : [ 12, 33 ]
      }, {
        "distance" : 980.2,
        "duration" : 70.6,
        "type" : "6",
        "instruction" : "Continue straight onto Sulzbacher Straße, K 5528",
        "way_points" : [ 33, 63 ]
      }, {
        "distance" : 3636.7,
        "duration" : 649.9,
        "type" : "5",
        "instruction" : "Turn slight right",
        "way_points" : [ 63, 163 ]
      } ]
    },
    "maneuver" : {
      "properties" : {
        "bearing_before" : {
          "type" : "number",
          "format" : "int64",
          "description" : "The azimuth angle (in degrees) of the direction right before the maneuver."
        },
        "bearing_after" : {
          "type" : "number",
          "format" : "int64",
          "description" : "The azimuth angle (in degrees) of the direction right after the maneuver."
        },
        "location" : {
          "type" : "array",
          "description" : "The coordinate of the point where a maneuver takes place.",
          "items" : {
            "type" : "number",
            "format" : "double"
          },
          "maxItems" : 2,
          "minItems" : 2
        }
      },
      "title" : "maneuver object"
    },
    "extras" : {
      "properties" : {
        "steepness" : {
          "$ref" : "#/definitions/extras_property"
        },
        "suitability" : {
          "$ref" : "#/definitions/extras_property"
        },
        "surface" : {
          "$ref" : "#/definitions/extras_property"
        },
        "waycategory" : {
          "$ref" : "#/definitions/extras_property"
        },
        "waytype" : {
          "$ref" : "#/definitions/extras_property"
        },
        "tollways" : {
          "$ref" : "#/definitions/extras_property"
        },
        "traildifficulty" : {
          "$ref" : "#/definitions/extras_property"
        }
      },
      "description" : "For every information item there is an associated block divided into *summary* and *values*."
    },
    "extras_property" : {
      "properties" : {
        "values" : {
          "type" : "array",
          "description" : "Broken down by way_points.",
          "items" : {
            "type" : "array",
            "items" : {
              "type" : "number",
              "format" : "double",
              "description" : "Value 1: Indice of the starting geometry for this section.\n\nValue 2: Indice of the end geometry for this section.\n\nValue 3: [Value](https://github.com/GIScience/openrouteservice-docs#routing-response) assigned to this section.\n"
            }
          }
        },
        "summary" : {
          "type" : "array",
          "description" : "Broken down by information category values.",
          "items" : {
            "$ref" : "#/definitions/summary_object"
          }
        }
      }
    },
    "summary_object" : {
      "properties" : {
        "value" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "[Value](https://github.com/GIScience/openrouteservice-docs#routing-response) of a info category."
        },
        "distance" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Cumulative distance of this value."
        },
        "amount" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Category percentage of the entire route."
        }
      }
    },
    "Routeresponse_info" : {
      "properties" : {
        "attribution" : {
          "type" : "string",
          "example" : "openrouteservice.org, OpenStreetMap contributors, tmc - BASt",
          "description" : "Attribution for using our service."
        },
        "engine" : {
          "$ref" : "#/definitions/info_engine"
        },
        "service" : {
          "type" : "string",
          "example" : "routing",
          "description" : "API endpoint used."
        },
        "timestamp" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1493300103526,
          "description" : "Unix timestamp of the precise request date."
        },
        "query" : {
          "$ref" : "#/definitions/Routeresponse_info_query"
        }
      },
      "title" : "info object",
      "description" : "Summarizes your query settings."
    },
    "Routeresponse_info_query" : {
      "required" : [ "coordinates", "geometry_format", "profile" ],
      "properties" : {
        "profile" : {
          "type" : "string",
          "example" : "driving-car"
        },
        "preference" : {
          "type" : "string",
          "example" : "fastest",
          "default" : "fastest"
        },
        "coordinates" : {
          "type" : "array",
          "example" : [ [ 8.34234, 48.23424 ], [ 8.23424, 48.26424 ] ],
          "items" : {
            "type" : "array",
            "items" : {
              "type" : "number",
              "format" : "double"
            },
            "maxItems" : 2,
            "minItems" : 2
          },
          "minItems" : 2
        },
        "language" : {
          "type" : "string",
          "example" : "en"
        },
        "units" : {
          "type" : "string",
          "example" : "meters"
        },
        "geometry" : {
          "type" : "boolean",
          "example" : true
        },
        "geometry_format" : {
          "type" : "string",
          "example" : "encodedpolyline"
        },
        "instructions_format" : {
          "type" : "string",
          "example" : "text"
        },
        "instructions" : {
          "type" : "boolean",
          "example" : true
        },
        "elevation" : {
          "type" : "boolean",
          "example" : false
        },
        "options" : {
          "type" : "string",
          "example" : ""
        }
      }
    },
    "Geocode_structured_query" : {
      "type" : "object",
      "properties" : {
        "address" : {
          "type" : "string",
          "description" : "Can contain a full address with house number or only a street name"
        },
        "neighbourhood" : {
          "type" : "string",
          "description" : "Vernacular geographic entities that may not necessarily be official administrative divisions but are important nonetheless"
        },
        "borough" : {
          "type" : "string",
          "description" : "Mostly known in the context of New York City, even though they may exist in other cities, such as Mexico City"
        },
        "locality" : {
          "type" : "string",
          "description" : "Name of a Settlement"
        },
        "municipality" : {
          "type" : "string",
          "description" : "Single urban administrative division, distinguished from county"
        },
        "county" : {
          "type" : "string",
          "description" : "Administrative division between localities and regions"
        },
        "region" : {
          "type" : "string",
          "description" : "Normally the first-level administrative divisions within countries, analogous to states and provinces in the United States and Canada, respectively, though most other countries contain regions as well"
        },
        "postalcode" : {
          "type" : "string",
          "description" : "A postalcode"
        },
        "country" : {
          "type" : "string",
          "description" : "Name of a country. Supports two- and three-letter abbreviations"
        }
      },
      "title" : "Geocoding structured query",
      "description" : "Composition of a structured query object. A minimum of one parameter has to be specified.",
      "example" : {
        "address" : "Berliner Straße 45",
        "locality" : "Heidelberg",
        "country" : "Germany",
        "postalcode" : 69120
      }
    },
    "Geocoderesponse" : {
      "properties" : {
        "type" : {
          "type" : "string",
          "example" : "FeatureCollection",
          "default" : "FeatureCollection"
        },
        "features" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Geocoderesponse_features"
          }
        },
        "bbox" : {
          "type" : "array",
          "example" : [ 13.239515, 52.514679, 13.239515, 52.514679 ],
          "description" : "Contains the minimum bounding box of all features.",
          "items" : {
            "type" : "number",
            "format" : "double"
          },
          "maxItems" : 4,
          "minItems" : 4
        },
        "info" : {
          "$ref" : "#/definitions/Geocoderesponse_info"
        }
      },
      "title" : "Geocode Response Object"
    },
    "Geocoderesponse_features" : {
      "properties" : {
        "type" : {
          "type" : "string",
          "example" : "Feature",
          "default" : "Feature"
        },
        "geometry" : {
          "$ref" : "#/definitions/Geocoderesponse_geometry"
        },
        "properties" : {
          "$ref" : "#/definitions/Geocoderesponse_properties"
        }
      },
      "title" : "features object"
    },
    "Geocoderesponse_geometry" : {
      "properties" : {
        "type" : {
          "type" : "string",
          "example" : "Point",
          "default" : "Point"
        },
        "coordinates" : {
          "type" : "array",
          "example" : [ 13.414369, 52.516116 ],
          "description" : "Contains the longitude and latitude",
          "items" : {
            "type" : "number",
            "format" : "double"
          },
          "maxItems" : 2,
          "minItems" : 2
        }
      },
      "title" : "geometry object"
    },
    "Geocoderesponse_properties" : {
      "properties" : {
        "country" : {
          "type" : "string",
          "example" : "Germany"
        },
        "country_code" : {
          "type" : "string",
          "example" : "DE"
        },
        "region" : {
          "type" : "string",
          "example" : "Berlin"
        },
        "locality" : {
          "type" : "string",
          "example" : "Berlin"
        },
        "county" : {
          "type" : "string"
        },
        "state" : {
          "type" : "string",
          "example" : "Berlin"
        },
        "city" : {
          "type" : "string",
          "example" : "Berlin"
        },
        "postal_code" : {
          "type" : "string",
          "example" : "10179"
        },
        "borough" : {
          "type" : "string",
          "example" : "Mitte"
        },
        "neighbourhood" : {
          "type" : "string",
          "example" : "Mitte"
        },
        "street" : {
          "type" : "string",
          "example" : "Waisenstraße"
        },
        "house_number" : {
          "type" : "string",
          "example" : "3"
        },
        "name" : {
          "type" : "string",
          "example" : "Waisenstraße 3"
        },
        "place_type" : {
          "type" : "string",
          "example" : "address",
          "description" : "[Type](https://github.com/GIScience/openrouteservice-docs/blob/master/README.md#place-type) of the returned location.\n"
        },
        "distance" : {
          "type" : "string",
          "example" : "12.41",
          "description" : "Distance between the input location and the result point."
        },
        "confidence" : {
          "type" : "string",
          "example" : "0.8",
          "description" : "Value range: `0-1`\n**For reverse geocoding:** Based on the distance. The closer a result is to the queried point, the higher the `confidence`.\n**For normal geocoding:**  Based on the comparison of the query and the result. The closer a result is to the query, the higher the `confidence`.\n"
        }
      },
      "title" : "porperties object",
      "description" : "Contains the OSM tag information of the point and the `confidence`. For reverse request with `distance`."
    },
    "Geocoderesponse_info" : {
      "properties" : {
        "service" : {
          "type" : "string",
          "example" : "geocoding",
          "description" : "API endpoint used.",
          "default" : "geocoding"
        },
        "attribution" : {
          "type" : "string",
          "example" : "openrouteservice.org, OpenStreetMap contributors",
          "description" : "Attribution for using our service."
        },
        "query" : {
          "$ref" : "#/definitions/Geocoderesponse_info_query"
        },
        "engine" : {
          "$ref" : "#/definitions/info_engine"
        },
        "timestamp" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1493288124343,
          "description" : "Unix timestamp of the precise request date."
        }
      },
      "title" : "info object"
    },
    "Geocoderesponse_info_query" : {
      "properties" : {
        "query" : {
          "type" : "string"
        },
        "location" : {
          "type" : "array",
          "example" : [ 13.239515, 52.514679 ],
          "items" : {
            "type" : "number",
            "format" : "double"
          }
        },
        "limit" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 20,
          "default" : 20
        }
      },
      "title" : "query object",
      "description" : "Summarizes your query settings."
    },
    "IsochronesResponse" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "default" : "FeatureCollection"
        },
        "features" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/IsochronesResponse_features"
          }
        },
        "bbox" : {
          "type" : "array",
          "example" : [ 8.337413, 48.228996, 8.348807, 48.235437 ],
          "description" : "Contains the minimum bounding box of all features.",
          "items" : {
            "type" : "number",
            "format" : "double"
          },
          "maxItems" : 4,
          "minItems" : 4
        },
        "info" : {
          "$ref" : "#/definitions/IsochronesResponse_info"
        }
      },
      "title" : "Isochrones Response Object"
    },
    "IsochronesResponse_features" : {
      "properties" : {
        "geometry" : {
          "$ref" : "#/definitions/IsochronesResponse_geometry"
        },
        "type" : {
          "type" : "string",
          "example" : "Feature",
          "default" : "Feature"
        },
        "properties" : {
          "$ref" : "#/definitions/IsochronesResponse_properties"
        }
      },
      "title" : "features object"
    },
    "IsochronesResponse_geometry" : {
      "properties" : {
        "coordinates" : {
          "type" : "array",
          "example" : [ [ 8.337413, 48.233333 ], [ 8.337446, 48.233146 ], [ 8.339023, 48.231162 ], [ 8.342829, 48.228996 ], [ 8.344379, 48.229675 ], [ 8.34602, 48.230662 ], [ 8.347124, 48.231837 ], [ 8.348778, 48.233859 ], [ 8.348807, 48.233995 ], [ 8.348731, 48.235059 ], [ 8.347973, 48.235437 ], [ 8.340959, 48.233954 ], [ 8.337413, 48.233333 ] ],
          "items" : {
            "type" : "array",
            "items" : {
              "type" : "number",
              "format" : "double"
            }
          }
        },
        "type" : {
          "type" : "string",
          "example" : "Polygon",
          "default" : "Polygon"
        }
      },
      "title" : "geometry object"
    },
    "IsochronesResponse_properties" : {
      "properties" : {
        "area" : {
          "type" : "number",
          "format" : "double",
          "description" : "Area of the polygon in square meters (for attributes=area)."
        },
        "reachfactor" : {
          "type" : "number",
          "format" : "double",
          "description" : "Returns a reachability score between 0 and 1. As the maximum reachfactor would be achieved by travelling as the crow flies at maximum speed in a vacuum without obstacles, naturally it can never be 1. The availability of motorways however produces a higher score over normal roads.\n"
        },
        "center" : {
          "type" : "array",
          "description" : "The coordinates of the specific analysis location.",
          "items" : {
            "type" : "number",
            "format" : "double"
          },
          "maxItems" : 2,
          "minItems" : 2
        },
        "group_index" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Id of the isochrone based on the position in the `locations` query-parameter. Every location comprises its own group of polygons."
        },
        "value" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The range value of this isochrone/equidistant in seconds/meters."
        },
        "contours" : {
          "type" : "array",
          "description" : "For intersections=true. Every intersection polygon comprises contours with an index array for each participating isochrone.",
          "items" : {
            "type" : "array",
            "description" : "For each participating isochrone...",
            "items" : {
              "type" : "integer",
              "format" : "int64",
              "description" : "... the group_index(first value) and the isochrone index(second value), numbered from the center, starting with `0`.\nThe example (\"contours\": [[0,1],[1,1],[2,0]]) would indicate the intersection polygon between the 2nd isochrone of the 1st location, the 2nd isochrone of th 2nd location and the 1st isochrone of the 3rd location.\n"
            }
          }
        }
      },
      "title" : "porperties object",
      "example" : {
        "group_index" : 0,
        "value" : 60,
        "center" : [ 8.34234, 48.23424 ]
      }
    },
    "IsochronesResponse_info" : {
      "properties" : {
        "service" : {
          "type" : "string",
          "example" : "isochrones",
          "description" : "API endpoint used.",
          "default" : "isochrones"
        },
        "query" : {
          "$ref" : "#/definitions/IsochronesResponse_info_query"
        },
        "attribution" : {
          "type" : "string",
          "example" : "openrouteservice.org, OpenStreetMap contributors",
          "description" : "Attribution for using our service."
        },
        "engine" : {
          "$ref" : "#/definitions/info_engine"
        },
        "timestamp" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1493305098226,
          "description" : "Unix timestamp of the precise request date."
        }
      },
      "title" : "info object"
    },
    "IsochronesResponse_info_query" : {
      "properties" : {
        "mode" : {
          "type" : "string"
        },
        "range_type" : {
          "type" : "string"
        },
        "range" : {
          "type" : "integer",
          "format" : "int64"
        },
        "interval" : {
          "type" : "integer",
          "format" : "int64"
        },
        "locations" : {
          "type" : "array",
          "items" : {
            "type" : "array",
            "items" : {
              "type" : "number",
              "format" : "double"
            }
          }
        }
      },
      "title" : "query object",
      "description" : "Summarizes your query settings.",
      "example" : {
        "ranges" : "60.0",
        "profile" : "driving-car",
        "locations" : [ [ 8.34234, 48.23424 ] ],
        "range_type" : "time",
        "location_type" : "start"
      }
    },
    "LocationsPoiResponse" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "example" : "FeatureCollection",
          "default" : "FeatureCollection"
        },
        "features" : {
          "type" : "array",
          "example" : [ {
            "type" : "Feature",
            "geometry" : {
              "type" : "Point",
              "coordinates" : [ 8.1691, 47.444286 ]
            },
            "properties" : {
              "osm_id" : "4491251090",
              "category" : "451",
              "name" : "Volg",
              "distance" : "115.08"
            }
          }, {
            "type" : "Feature",
            "geometry" : {
              "type" : "Point",
              "coordinates" : [ 8.168594, 47.380072 ]
            },
            "properties" : {
              "osm_id" : "2754058215",
              "category" : "474",
              "name" : "Berner Früchte und Gemüse",
              "phone" : "+41 (0)62 891 34 50/51",
              "website" : "http://www.berner-gemuese.ch",
              "distance" : "76.58"
            }
          } ],
          "items" : {
            "$ref" : "#/definitions/location_features"
          }
        },
        "bbox" : {
          "type" : "array",
          "example" : [ 8.168594, 47.380072, 8.1691, 47.444286 ],
          "description" : "Contains the minimum bounding box of all features.",
          "items" : {
            "type" : "number",
            "format" : "double"
          },
          "maxItems" : 4,
          "minItems" : 4
        },
        "info" : {
          "$ref" : "#/definitions/LocationsPoiResponse_info"
        }
      },
      "title" : "Places Poi Response Object"
    },
    "location_features" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "default" : "Feature"
        },
        "geometry" : {
          "$ref" : "#/definitions/location_features_geometry"
        },
        "properties" : {
          "$ref" : "#/definitions/location_features_properties"
        }
      },
      "title" : "features object"
    },
    "location_features_geometry" : {
      "properties" : {
        "type" : {
          "type" : "string",
          "default" : "Point"
        },
        "coordinates" : {
          "type" : "array",
          "items" : {
            "type" : "number",
            "format" : "double"
          },
          "maxItems" : 2,
          "minItems" : 2
        }
      },
      "title" : "geometry object"
    },
    "location_features_properties" : {
      "properties" : {
        "osm_id" : {
          "type" : "string"
        },
        "category" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "address" : {
          "type" : "string"
        },
        "phone" : {
          "type" : "string"
        },
        "website" : {
          "type" : "string"
        },
        "opening_hours" : {
          "type" : "string"
        },
        "wheelchair" : {
          "type" : "string"
        },
        "distance" : {
          "type" : "string"
        }
      },
      "title" : "properties object"
    },
    "LocationsPoiResponse_info" : {
      "properties" : {
        "service" : {
          "type" : "string",
          "example" : "places",
          "description" : "API endpoint used."
        },
        "engine" : {
          "$ref" : "#/definitions/info_engine"
        },
        "attribution" : {
          "type" : "string",
          "example" : "openrouteservice.org, OpenStreetMap contributors",
          "description" : "Attribution for using our service."
        },
        "timestamp" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1493306341299,
          "description" : "Unix timestamp of the precise request date."
        },
        "query" : {
          "$ref" : "#/definitions/LocationsPoiResponse_info_query"
        }
      },
      "title" : "info object"
    },
    "LocationsPoiResponse_info_query" : {
      "properties" : {
        "filter" : {
          "$ref" : "#/definitions/LocationsPoiResponse_info_query_filter"
        },
        "radius" : {
          "type" : "integer",
          "format" : "int64"
        },
        "limit" : {
          "type" : "integer",
          "format" : "int64"
        }
      },
      "title" : "query object",
      "description" : "Summarizes your query settings.",
      "example" : {
        "filter" : {
          "category_group_ids" : [ 420 ]
        },
        "radius" : 500,
        "limit" : 20
      }
    },
    "LocationsPoiResponse_info_query_filter" : {
      "properties" : {
        "category_group_ids" : {
          "type" : "array",
          "items" : {
            "type" : "integer",
            "format" : "int64",
            "example" : 560
          }
        },
        "catoegory_ids" : {
          "type" : "array",
          "items" : {
            "type" : "integer",
            "format" : "int64",
            "example" : 561
          }
        }
      },
      "title" : "filter object",
      "description" : "Filter the results by `category_group_ids` or `category_ids`. If; ; both are specified the *group_ids* take priority."
    },
    "LocationsBody" : {
      "properties" : {
        "filter" : {
          "$ref" : "#/definitions/filter"
        },
        "details" : {
          "type" : "string",
          "example" : "address|contact|attributes",
          "enum" : [ "address", "contact", "attributes" ]
        },
        "limit" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1000
        },
        "radius" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 500
        },
        "sortby" : {
          "type" : "string",
          "example" : "category",
          "enum" : [ "category", "distance" ]
        },
        "bbox" : {
          "type" : "string",
          "example" : "8.165339,47.265966,8.179995,49.214088",
          "description" : "\"The pattern for this bbox string is `\"minlon,minlat,maxlon,maxlat\"`\"\n"
        },
        "geometry" : {
          "$ref" : "#/definitions/geometry"
        }
      },
      "title" : "Locations(Post) body",
      "description" : "**You have to specify at least one of** `bbox` **and** `geometry` !\n"
    },
    "filter" : {
      "properties" : {
        "category_group_ids" : {
          "type" : "array",
          "items" : {
            "type" : "integer",
            "format" : "int64",
            "example" : 560
          }
        },
        "catoegory_ids" : {
          "type" : "array",
          "items" : {
            "type" : "integer",
            "format" : "int64",
            "example" : 561
          }
        }
      },
      "title" : "filter object"
    },
    "geometry" : {
      "type" : "string",
      "description" : "The geometry can be either a Point , LineString or Polygon.",
      "example" : "{type: LineString, coordinates:[[8.167426,49.272556],[8.167588,47.272445],[8.168082,47.272105],[8.168224,47.271917],[8.16831,47.271941],[8.168926,47.272216],[8.169054,47.272278],[8.169165,47.272186],[8.169256,47.272103],[8.16948,47.271921],[8.170129,47.271408],[8.170265,47.271295],[8.170701,47.27097],[8.171496,47.270485],[8.171796,47.270296]]}"
    },
    "MatrixBody" : {
      "properties" : {
        "profile" : {
          "type" : "string",
          "description" : "Specifies the route profile.",
          "enum" : [ "driving-car", "driving-hgv", "cycling-regular", "cycling-road", "cycling-mountain", "cycling-electric", "foot-walking", "foot-hiking", "wheelchair" ],
          "default" : "driving-car"
        },
        "locations" : {
          "type" : "array",
          "example" : [ [ "9.9700934,48.477473" ], [ "9.207916,49.153868" ], [ "37.573242,55.801281" ], [ "115.663757,38.106467" ] ],
          "description" : "List of comma separated lists of `longitude,latitude` coordinates (note, without quotes around the coordinates, this is a displaying error of swagger). \nexample : `\"locations\":[[9.70093,48.477473],[9.207916,49.153868],[37.573242,55.801281],[115.663757,38.106467]]`\n",
          "items" : {
            "type" : "array",
            "items" : {
              "type" : "number",
              "format" : "double"
            }
          }
        },
        "sources" : {
          "type" : "array",
          "example" : "2,3",
          "description" : "A comma separated list of indices that refers to the list of locations (starting with `0`). `{index_1},{index_2}[,{index_N} ...]` or `all` (default).\n\nExample: `0,3` for the first and fourth Location.\n",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "metrics" : {
          "type" : "string",
          "description" : "Specifies a list of returned metrics separated with a pipe character (|).\n* `distance` - Returns distance matrix for specified points in defined `units`.\n* `duration` - Returns duration matrix for specified points in defined `units`.\n* `weight`   - Returns weight matrix for specified points in defined `units`.\n",
          "enum" : [ "distance", "duration", "weight" ],
          "default" : "duration"
        },
        "resolve_locations" : {
          "type" : "boolean",
          "description" : "Specifies whether given locations are resolved or not. If the parameter value set to `true`, every element in destinations and sources will contain `name` element that identifies the name of the closest street. Default is `false`",
          "default" : false
        },
        "units" : {
          "type" : "string",
          "description" : "Specifies the unit of measurement for distances. Default is `m`",
          "enum" : [ "m", "km", "mi" ],
          "default" : "m"
        },
        "optimized" : {
          "type" : "boolean",
          "description" : "Specifies whether Dijkstra algorithm (`false`) or any available technique to speed up shortest-path routing (`true`) is used.\n",
          "default" : true
        }
      }
    },
    "MatrixResponse" : {
      "properties" : {
        "distances" : {
          "$ref" : "#/definitions/MatrixResponse_distances"
        },
        "durations" : {
          "$ref" : "#/definitions/MatrixResponse_durations"
        },
        "weights" : {
          "$ref" : "#/definitions/MatrixResponse_weights"
        },
        "destinations" : {
          "type" : "array",
          "example" : [ {
            "location" : [ 37.572926, 55.80129 ],
            "snapped_distance" : 19.8
          }, {
            "location" : [ 115.658655, 38.116731 ],
            "snapped_distance" : 1225.53
          } ],
          "description" : "Array of destinations. Each point is snapped to the road and path network",
          "items" : {
            "$ref" : "#/definitions/MatrixResponse_location"
          }
        },
        "sources" : {
          "type" : "array",
          "example" : [ {
            "location" : [ 9.968501, 48.47789 ],
            "snapped_distance" : 126.17
          }, {
            "location" : [ 9.207773, 49.153882 ],
            "snapped_distance" : 10.54
          }, {
            "location" : [ 37.572926, 55.80129 ],
            "snapped_distance" : 19.8
          }, {
            "location" : [ 115.658655, 38.116731 ],
            "snapped_distance" : 1225.53
          } ],
          "description" : "Array of sources. Each point is snapped to the road and path network",
          "items" : {
            "$ref" : "#/definitions/MatrixResponse_location"
          }
        },
        "info" : {
          "$ref" : "#/definitions/MatrixResponse_info"
        }
      },
      "title" : "Matrix Response Object",
      "description" : "The Matrix Response contains one matrix for each specified `metrics` value.\n"
    },
    "MatrixResponse_distances" : {
      "description" : "[Distance matrix](https://github.com/GIScience/openrouteservice-docs/blob/master/README.md#matrix-response) where the items(rows) correspond to the number of `sources` and the entries(columns) of each item correspond to the number of `destinations`.\n",
      "example" : [ [ 2366119, 2338412.25, 0, 7519754 ], [ 9983969, 9956262, 7509508.5, 0 ] ]
    },
    "MatrixResponse_durations" : {
      "description" : "[Duration matrix](https://github.com/GIScience/openrouteservice-docs/blob/master/README.md#matrix-response) where the items(rows) correspond to the number of `sources` and the entries(columns) of each item correspond to the number of `destinations`.\n",
      "example" : [ [ 88632.73, 87838.93, 0, 311791.09 ], [ 399967.72, 399173.91, 310735.56, 0 ] ]
    },
    "MatrixResponse_weights" : {
      "description" : "[Weight matrix](https://github.com/GIScience/openrouteservice-docs/blob/master/README.md#matrix-response) where the items(rows) correspond to the number of `sources` and the entries(columns) of each item correspond to the number of `destinations`.\n",
      "example" : [ [ 88635.17, 87841.37, 0, 311794.25 ], [ 399973.16, 399179.34, 310738.84, 0 ] ]
    },
    "MatrixResponse_location" : {
      "type" : "object",
      "properties" : {
        "location" : {
          "type" : "array",
          "description" : "`{longitude},{latitude}` coordinates of the closest accessible point on the routing graph.\n",
          "items" : {
            "type" : "number",
            "format" : "double"
          }
        },
        "name" : {
          "type" : "string",
          "description" : "Name of the street the closest accessible point is situated on. Only for `resolve_locations=true` and only if name is available.\n"
        },
        "snapped_distance" : {
          "type" : "number",
          "format" : "double",
          "description" : "Distance between the `source`/`destination` Location and the used point on the routing graph.\n"
        }
      }
    },
    "MatrixResponse_info" : {
      "properties" : {
        "service" : {
          "type" : "string",
          "example" : "matrix",
          "description" : "API endpoint used."
        },
        "engine" : {
          "$ref" : "#/definitions/info_engine"
        },
        "attribution" : {
          "type" : "string",
          "example" : "openrouteservice.org, OpenStreetMap contributors",
          "description" : "Attribution for using our service."
        },
        "timestamp" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1493306341299,
          "description" : "Unix timestamp of the precise request date."
        },
        "query" : {
          "$ref" : "#/definitions/MatrixResponse_info_query"
        }
      },
      "title" : "info object"
    },
    "MatrixResponse_info_query" : {
      "properties" : {
        "profile" : {
          "type" : "string",
          "example" : "driving-car"
        },
        "locations" : {
          "type" : "array",
          "example" : [ [ 9.970093, 48.477473 ], [ 9.207916, 49.153868 ], [ 37.573242, 55.801281 ], [ 115.663757, 38.106467 ] ],
          "items" : {
            "type" : "array",
            "items" : {
              "type" : "number",
              "format" : "double"
            },
            "maxItems" : 2,
            "minItems" : 2
          },
          "maxItems" : 200,
          "minItems" : 2
        },
        "sources" : {
          "type" : "array",
          "example" : "2,3",
          "items" : {
            "type" : "string"
          }
        },
        "destinations" : {
          "type" : "array",
          "example" : "all",
          "items" : {
            "type" : "string"
          }
        },
        "metrics" : {
          "type" : "array",
          "example" : "distance|duration|weight",
          "items" : {
            "type" : "string"
          }
        },
        "optimized" : {
          "type" : "boolean",
          "example" : true
        }
      },
      "title" : "query object",
      "description" : "Summarizes your query settings."
    },
    "info_engine" : {
      "properties" : {
        "version" : {
          "type" : "string",
          "example" : "4.2.0",
          "description" : "Backend version used for the request."
        },
        "build_date" : {
          "type" : "string",
          "example" : "2017-09-08T09:21:35Z",
          "description" : "Build date of the used backend version"
        }
      },
      "title" : "Engine Information"
    },
    "error" : {
      "properties" : {
        "error" : {
          "$ref" : "#/definitions/error_error"
        },
        "info" : {
          "$ref" : "#/definitions/error_info"
        }
      },
      "title" : "STANDARD HTML ERROR"
    },
    "error_error" : {
      "properties" : {
        "code" : {
          "type" : "integer",
          "format" : "int32"
        },
        "message" : {
          "type" : "string"
        },
        "fields" : {
          "type" : "string"
        }
      },
      "title" : "error object"
    },
    "error_info" : {
      "properties" : {
        "version" : {
          "type" : "string"
        },
        "timestamp" : {
          "type" : "integer",
          "format" : "int64"
        }
      },
      "title" : "info object"
    },
    "profile_params_weightings" : {
      "properties" : {
        "level" : {
          "type" : "integer",
          "format" : "int64",
          "enum" : [ 0, 1, 2, 3 ]
        }
      }
    },
    "profile_params_restrictions" : {
      "properties" : {
        "gradient" : {
          "type" : "integer",
          "format" : "int64",
          "minimum" : 1,
          "maximum" : 15
        }
      }
    }
  }
}